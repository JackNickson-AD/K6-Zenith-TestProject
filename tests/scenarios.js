export { ping_log_debug } from './ping_log_debug.js';
export { ping_log_critical } from './ping_log_critical.js';
export { ping_log_error } from './ping_log_error.js';
export { ping_log_warning } from './ping_log_warning.js';
export { ping_log_information } from './ping_log_information.js';
export { ping_log_trace } from './ping_log_trace.js';
export { ping_ok } from './ping_ok.js';
export { ping } from './ping.js';
import http from 'k6/http';
import { set_request_header, response_status_check, login_and_generate_authtoken } from '../utils/utils.js';
import { htmlReport } from "https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js";

const USERNAME = 'cvlbestway'; // Set your own email or `${randomString(10)}@example.com`;
const PASSWORD = 'TestingIsFun100!';
const URL_SSO = 'https://localhost:44353/api/sso/authenticate';

export function setup() {
    authToken = login_and_generate_authtoken(URL_SSO, USERNAME, PASSWORD);
}

export let options = {
    scenarios: {
        ping_log_critical: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping_log_critical' }, // extra tags for the metrics generated by this scenario
            exec: 'ping_log_critical', // the function this scenario will execute
        },
        ping_log_error: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping_log_error' }, // extra tags for the metrics generated by this scenario
            exec: 'ping_log_error', // the function this scenario will execute
        },
        ping_log_warning: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping_log_warning' }, // extra tags for the metrics generated by this scenario
            exec: 'ping_log_warning', // the function this scenario will execute
        },
        ping_log_information: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping_log_information' }, // extra tags for the metrics generated by this scenario
            exec: 'ping_log_information', // the function this scenario will execute
        },
        ping_log_trace: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping_log_trace' }, // extra tags for the metrics generated by this scenario
            exec: 'ping_log_trace', // the function this scenario will execute
        },
        ping_log_debug: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping_log_debug' }, // extra tags for the metrics generated by this scenario
            exec: 'ping_log_debug', // the function this scenario will execute
        },
        ping_ok: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping_ok' }, // extra tags for the metrics generated by this scenario
            exec: 'ping_ok', // the function this scenario will execute
        },
        ping: {
            executor: 'ramping-vus', // Executor type is dependent on the scenario https://k6.io/docs/using-k6/scenarios/executors/
            stages: [
                { duration: '15s', target: 15 },
                { duration: '15s', target: 15 },
                { duration: '15s', target: 0 },
            ],
            tags: { test: 'ping' }, // extra tags for the metrics generated by this scenario
            exec: 'ping', // the function this scenario will execute
        }
    },
    thresholds: { // Each scenario can have its own thresholds
        'http_req_duration': ['p(20)<800', 'p(20)<800'],
        'http_req_failed': ['rate<0.5'],
    }
};

export function handleSummary(data) {
    console.log('Preparing the end-of-test summary...');
  
    // Send results to external location
    /*
      const res = http.post('https://[enter-url-here]', JSON.stringify(data));
      if (res.status != 200) {
        console.error('Could not send summary, got status ' + res.status);
      }
  */
  
    return { "summary.html" : htmlReport(data)}
  }
